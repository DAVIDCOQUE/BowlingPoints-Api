name: CI/CD Pipeline - BowlingPoints

on:
  push:
    branches:
      - dev
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    name: Build, test and analyze
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: bowlingpoints
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build, test and generate JaCoCo report
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: mvn clean verify jacoco:report -B --file pom.xml

      - name: SonarQube analysis (with JaCoCo coverage)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar \
          -Dsonar.projectKey=bowlingpoints \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.java.binaries=target/classes

      - name: Check SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: bowlingpoints/target/sonar/report-task.txt

  docker-deploy:
    name: Build and deploy Docker
    runs-on: ubuntu-latest
    needs: build-and-analyze
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bowlingpoints:latest bowlingpoints

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bowlingpoints:latest

      - name: Deploy to AWS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bowlingpoints:latest
            docker stop bowlingpoints || true
            docker rm bowlingpoints || true
            docker run -d --name bowlingpoints -p ${{ secrets.APP_PORTS }} \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              --restart always \
              ${{ secrets.DOCKERHUB_USERNAME }}/bowlingpoints:latest
